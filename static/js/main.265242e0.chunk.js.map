{"version":3,"sources":["components/Header.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","useContext","AppContext","setTodos","id","setId","useState","todo","setTodo","addTodo","todos","text","value","onKeyPress","e","key","onChange","target","onClick","Todo","className","filter","TodoList","map","createContext","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAGaA,EAAS,WAAO,IAAD,EACMC,qBAAWC,GAAnCC,EADkB,EAClBA,SAAUC,EADQ,EACRA,GAAIC,EADI,EACJA,MADI,EAEFC,mBAAS,IAFP,mBAEnBC,EAFmB,KAEbC,EAFa,KAGpBC,EAAU,WACTF,IAGLF,GAAM,SAACD,GAAD,OAASA,EAAM,KACrBD,GAAS,SAACO,GAAD,4BAAeA,GAAf,CAAsB,CAAEN,KAAIO,KAAMJ,QAC3CC,EAAQ,MAGV,OACE,6BACE,yCACA,6BACE,2BACEI,MAAOL,EACPM,WAAY,SAACC,GACG,UAAVA,EAAEC,KACJN,KAGJO,SAAU,SAACF,GAAD,OAAON,EAAQM,EAAEG,OAAOL,UAEpC,4BACEM,QAAS,WACPT,MAFJ,UCNOU,EAnBF,SAAC,GAAkB,IAAhBf,EAAe,EAAfA,GAAIO,EAAW,EAAXA,KACVR,EAAaF,qBAAWC,GAAxBC,SACR,OACE,wBAAIiB,UAAU,OAAOL,IAAKX,GACxB,yBAAKgB,UAAU,QAAQT,GACvB,yBAAKS,UAAU,eACb,4BACEF,QAAS,WACPf,GAAS,SAACO,GAAD,OAAWA,EAAMW,QAAO,SAACd,GAAD,OAAUA,EAAKH,KAAOA,SAEzDgB,UAAU,UAJZ,aCLKE,EAAW,WAAO,IACrBZ,EAAUT,qBAAWC,GAArBQ,MACR,OACE,wBAAIU,UAAU,QACXV,GAASA,EAAMa,KAAI,SAAChB,GAAD,OAAU,kBAAC,EAAD,CAAMQ,IAAKR,EAAKH,GAAIA,GAAIG,EAAKH,GAAIO,KAAMJ,EAAKI,YCH1ET,EAAasB,wBAAc,CAC/Bd,MAAO,GACPN,GAAI,IAyBSqB,MApBf,WAAgB,IAAD,EACanB,mBAAS,IADtB,mBACNI,EADM,KACCP,EADD,OAEOG,mBAAS,GAFhB,mBAENF,EAFM,KAEFC,EAFE,KAGb,OACE,kBAACH,EAAWwB,SAAZ,CACEd,MAAO,CACLF,QACAP,WACAC,KACAC,UAGF,yBAAKe,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCdYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.265242e0.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { AppContext } from '../App';\n\nexport const Header = () => {\n  const { setTodos, id, setId } = useContext(AppContext);\n  const [todo, setTodo] = useState('');\n  const addTodo = () => {\n    if (!todo) {\n      return;\n    }\n    setId((id) => (id += 1));\n    setTodos((todos) => [...todos, { id, text: todo }]);\n    setTodo('');\n  };\n\n  return (\n    <div>\n      <h1>Todo List</h1>\n      <div>\n        <input\n          value={todo}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              addTodo();\n            }\n          }}\n          onChange={(e) => setTodo(e.target.value)}\n        />\n        <button\n          onClick={() => {\n            addTodo();\n          }}\n        >\n          add\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport { AppContext } from '../App';\n\nconst Todo = ({ id, text }) => {\n  const { setTodos } = useContext(AppContext);\n  return (\n    <li className='todo' key={id}>\n      <div className='text'>{text}</div>\n      <div className='button-list'>\n        <button\n          onClick={() => {\n            setTodos((todos) => todos.filter((todo) => todo.id !== id));\n          }}\n          className='remove'\n        >\n          remove\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default Todo;\n","import React, { useContext } from 'react';\nimport Todo from './Todo';\nimport { AppContext } from '../App';\n\nexport const TodoList = () => {\n  const { todos } = useContext(AppContext);\n  return (\n    <ul className='list'>\n      {todos && todos.map((todo) => <Todo key={todo.id} id={todo.id} text={todo.text} />)}\n    </ul>\n  );\n};\n","import React, { createContext, useState } from 'react';\nimport './App.scss';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\n\nconst AppContext = createContext({\n  todos: [],\n  id: 0\n});\n\nexport { AppContext };\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [id, setId] = useState(0);\n  return (\n    <AppContext.Provider\n      value={{\n        todos,\n        setTodos,\n        id,\n        setId\n      }}\n    >\n      <div className='App'>\n        <Header />\n        <TodoList />\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}